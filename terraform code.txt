# creating key
resource tls_private_key task1-key {
 algorithm = "RSA"
 rsa_bits = 4096
}
#generating key-value pair
resource "aws_key_pair" "task1-key" {
 key_name = "task1key"
 public_key = tls_private_key.task1-key.public_key_openssh
}
# saving key to pem file
resource local_file task1-key {
 content = tls_private_key.task1-key.private_key_pem
 filename = "/root/terraform/task1key.pem"
depends_on = [
 tls_private_key.task1-key
 ]
}

#creating security group
 resource aws_security_group my-ssh{
 name = "my-ssh"
 description = "allow ssh and http traffic"
 ingress {
 from_port =22 
 to_port =22
 protocol = "tcp"
 cidr_blocks = ["0.0.0.0/0"]
}
 
 ingress {
 from_port = 80
 to_port = 80
 protocol = "tcp"
 cidr_blocks = ["0.0.0.0/0"]
}
 
 egress {
 from_port = 0
 to_port = 0
 protocol = -1
 cidr_blocks = ["0.0.0.0/0"]
 }
}
#creating/ launching aws instance
resource "aws_instance" "myin1" {
 ami = "ami-0447a12f28fddb066"
 instance_type = "t2.micro"
 availability_zone = "ap-south-1a"
 security_groups = ["${aws_security_group.my-ssh.name}"]
 key_name = aws_key_pair.task1-key.key_name
 
 connection {
 type = "ssh"
 user = "ec2-user"
 private_key =tls_private_key.task1-key.private_key_pem
 host = aws_instance.myin1.public_ip
 }
provisioner remote-exec {
 inline = [
 "sudo yum install httpd php git -y",
 "sudo systemctl start httpd",
 "sudo systemctl enable httpd"
 ]
 }
 
 tags = {
 Name = "task1"
 }
} 
output "task_ip" {
 value = aws_instance.myin1.public_ip
}

#creating ebs volume
resource "aws_ebs_volume" "ebs1" {
 availability_zone = aws_instance.myin1.availability_zone
 size = 1
tags = {
 Name = "myebs"
 }
}
#volume attach
resource "aws_volume_attachment" "ebs_att" {
 device_name = "/dev/sdc"
 volume_id = aws_ebs_volume.ebs1.id
 instance_id = aws_instance.myin1.id
 force_detach = true
}
resource "null_resource" "mounting" {
depends_on = [
 aws_volume_attachment.ebs_att,
 ]
connection {
 type = "ssh"
 user = "ec2-user"
 private_key =tls_private_key.task1-key.private_key_pem
 host = aws_instance.myin1.public_ip
 }
provisioner "remote-exec" {
 inline = [
 "sudo mkfs.ext4 /dev/xvdc",
 "sudo mount /dev/xvdc /var/www/html",
 "sudo rm -rf /var/www/html/*",
 "sudo git clone https://github.com/Kanika018/Multi-Hybrid-Cloud-Computing.git /var/www/html"
 ]
 }
}

#creating s3 bucket
resource "aws_s3_bucket" "kanika123-bucket" {
 bucket = "kanika123-bucket"
 acl = "public-read"
provisioner "local-exec" {
 command = "git clone https://github.com/Kanika018/Multi-Hybrid-Cloud-Computing bonz"
 }
provisioner "local-exec" {
 when = destroy
 command = "echo Y | rmdir /s bonz"
 }
}
resource "aws_s3_bucket_object" "objectk-upload" {
 bucket = aws_s3_bucket.kanika123-bucket.bucket
 key = "myimage.jpeg"
 source = "bonz/myimage.jpg"
 acl = "public-read"
}

#cloudfront
variable "var1" {default = "S3-"}
locals {
    s3_origin_id = "${var.var1}${aws_s3_bucket.kanika123-bucket.bucket}"
    image_url = "${aws_cloudfront_distribution.s3_distribution.domain_name}/${aws_s3_bucket_object.objectk-upload.key}"
}
resource "aws_cloudfront_distribution" "s3_distribution" {
    default_cache_behavior {
        allowed_methods  = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]
        cached_methods   = ["GET", "HEAD"]
        target_origin_id = local.s3_origin_id
        forwarded_values {
            query_string = false
            cookies {
                forward = "none"
            }
        }
        viewer_protocol_policy = "allow-all"
    }
enabled             = true
origin {
        domain_name = aws_s3_bucket.kanika123-bucket.bucket_domain_name
        origin_id   = local.s3_origin_id
    }
restrictions {
        geo_restriction {
        restriction_type = "none"
        }
    }
viewer_certificate {
        cloudfront_default_certificate = true
    }
connection {
        type    = "ssh"
        user    = "ec2-user"
  private_key =tls_private_key.task1-key.private_key_pem
  host    = aws_instance.myin1.public_ip
    }
provisioner "remote-exec" {
        inline  = [
            # "sudo su << \"EOF\" \n echo \"<img src='${self.domain_name}'>\" >> /var/www/html/index.php \n \"EOF\""
            "sudo su << EOF",
            "echo \"<img src='http://${self.domain_name}/${aws_s3_bucket_object.objectk-upload.key}'>\" >> /var/www/html/index.php",
            "EOF"
        ]
    }
}
